/**
 * Autogenerated UI for Grasshopper definitions
 * 
 * Routes:
 *  ('/')
 *     Show list of available definitions
 *  ('/:definition')
 *     Show autogenerated ui for definition
 */
const express = require('express')
const router = express.Router()
const getParams = require('../definitions.js').getParams

router.get('/', (req, res) => {
  res.send('This is the fixed string response for /deflib')
})

/**
 * Show autogenerated ui for definition
 */
router.get('/*', async (req, res, next) => {
  // This supports both full URLs and the file names of the hosted GH files. It's assumed that the external
  // URLs will have at least one forward slash in it  
  const urlPathOrName = req.url.substring(req.url.indexOf('/') + 1);

  let definitions = req.app.get('definitions');
  let definition = definitions.find(o => o.name === urlPathOrName)

  const isUrl = (urlPathOrName.includes('/'));
  const fullUrl = isUrl
    ?  'https://' + urlPathOrName // Reconstruct the full URL by prepending "https://"
    : `${req.protocol + '://' + req.get('host')}/definition/${definition.id}`;

  if (definition == null) {
    // Add to cache so that the solve endpoint can find it
    definition = {
      name: urlPathOrName,
      path: fullUrl
    }
    definitions.push(definition);
  }

  if (!Object.prototype.hasOwnProperty.call(definition, 'inputs')
      && !Object.prototype.hasOwnProperty.call(definition, 'outputs')) {
    let data
    try {
      data = await getParams(fullUrl)
    } catch (err) {
      next(err)
    }

    // cache
    definition.description = data.description
    definition.inputs = data.inputs
    definition.outputs = data.outputs

  }

  view = {
    name: definition.name,
    inputs: []
  }

  for (const input of definition.inputs) {
    const name = input.name
    const id = name
    switch (input.paramType) {
      case 'Integer':
        view.inputs.push({
          name: name,
          id: id,
          number: {
            value: input.default
          }
        })
        break;
      case 'Number':
        if (input.minimum !== undefined && input.minimum !== null
            && input.maximum !== undefined && input.maximum !== null)
        {

          let step = 1
          if( ( input.maximum - input.minimum ) < 1 ) {
            step = 0.1
          }
          // use range input if min and max set
          view.inputs.push({
            name: name,
            id: id,
            range: {
              min: input.minimum,
              max: input.maximum,
              value: input.default,
              step: step
            }
          })
        } else {
          // otherwise use number input
          view.inputs.push({
            name: name,
            id: id,
            number: {
              value: input.default
            }
          })
        }
        break
      case 'Boolean':
        view.inputs.push({
          name: name,
          id: id,
          bool: {
            value: input.default
          }
        })
        break
    }
  }

  res.render('deflib', view)
})

module.exports = router
